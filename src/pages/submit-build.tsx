import { type NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
import Input from "~/components/Input";
import Label from "~/components/Label";

import { api } from "~/utils/api";

export const macroBuildStyle = "macro";
export const timingBuildStyle = "timing attack";
export const allInBuildStyle = "all in";
export const cheeseBuildStyle = "cheese";

export const buildStyles = [
  macroBuildStyle,
  timingBuildStyle,
  allInBuildStyle,
  cheeseBuildStyle,
];

type races = "z" | "p" | "t";

type TStep = {
  name: string;
  supply: number;
};

type TBuildStep = {
  supply: number;
  unit: string;
  note: string;
};

const units: Record<races, TStep[]> = {
  z: [
    { name: "drone", supply: 1 },
    { name: "zerglin", supply: 1 },
    { name: "roach", supply: 2 },
    { name: "overlord", supply: 0 },
    { name: "ultralisk", supply: 6 },
    { name: "queen", supply: 2 },
    { name: "hydralisk", supply: 2 },
    { name: "baneling", supply: 0 },
    { name: "mutalisk", supply: 2 },
    { name: "corruptur", supply: 2 },
    { name: "infestor", supply: 2 },
    { name: "swarm host", supply: 3 },
    { name: "viper", supply: 3 },
    { name: "brood lord", supply: 2 },
    { name: "overseer", supply: 0 },
  ],
  p: [],
  t: [],
};
const Structures: Record<races, TStep[]> = {
  z: [
    { name: "spawning pool", supply: -1 },
    { name: "hatchery", supply: -1 },
    { name: "extractor", supply: -1 },
    { name: "evolution chamber", supply: -1 },
    { name: "spore crawler", supply: -1 },
    { name: "spine crawler", supply: -1 },
    { name: "roach warren", supply: -1 },
    { name: "baneling nest", supply: -1 },
    { name: "lair", supply: -1 },
    { name: "infestation pit", supply: -1 },
    { name: "hydralisk den", supply: -1 },
    { name: "nydus network", supply: -1 },
    { name: "hive", supply: -1 },
    { name: "ultralisk carn", supply: -1 },
    { name: "greater spire", supply: -1 },
  ],
  p: [],
  t: [],
};

const SubmitBuildPage: NextPage = () => {
  const createBuildMutation = api.builds.createBuild.useMutation();

  // const [build, setBuildOrder] = useState("");
  const [matchUp, setMatchUp] = useState("zvt");
  const [style, setStyle] = useState("macro");
  const [author, setAuthor] = useState("");
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [supply, setSupply] = useState(12);
  const [buildSteps, setBuildSteps] = useState<TBuildStep[]>([]);

  const router = useRouter();

  const handleSubmitBuildOrder = async (e: React.FormEvent) => {
    e.preventDefault();
    await createBuildMutation.mutateAsync({
      matchUp,
      build: JSON.stringify(buildSteps),
      style,
      author,
      title,
      description,
    });
    void router.push("/");
  };

  function updateNote(newNote: string, step: TBuildStep) {
    setBuildSteps(
      buildSteps.map((buildStep) =>
        buildStep === step ? { ...buildStep, note: newNote } : buildStep
      )
    );
  }
  function addToBuildOrder(stepName: TStep) {
    // setBuildOrder(build + "\n" + supply.toString() + " " + stepName.name);
    setBuildSteps([
      ...buildSteps,
      {
        supply,
        unit: stepName.name,
        note: "",
      },
    ]);
    setSupply(supply + stepName.supply);
  }
  const race = matchUp.split("v")[0];
  return (
    <>
      <Head>
        <title>Submit a Build</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center gap-8 py-12 ">
        <h1>Submit a Build Order</h1>
        <form
          onSubmit={handleSubmitBuildOrder}
          className="flex w-full flex-col items-center gap-5"
        >
          <div className="grid w-3/4 grid-cols-2 gap-6">
            <fieldset>
              <label
                htmlFor="match-up-select"
                className="mb-2 block text-sm font-medium text-gray-900  dark:text-white"
              >
                Match Up
              </label>
              <select
                required
                value={matchUp}
                onChange={(e) => setMatchUp(e.target.value)}
                name="match-up-select"
                id="match-up-select"
                className="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 outline-none focus:border-blue-500 focus:outline-none focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
              >
                <option value="zvt">ZvT</option>
                <option value="zvp">ZvP</option>
                <option value="zvz">ZvZ</option>
                <option value="pvt">PvT</option>
                <option value="pvp">PvP</option>
                <option value="pvz">PvZ</option>
                <option value="tvt">TvT</option>
                <option value="tvz">TvZ</option>
                <option value="tvp">TvP</option>
              </select>
            </fieldset>
            <fieldset>
              <label
                htmlFor="style"
                className="mb-2 block text-sm font-medium text-gray-900  dark:text-white"
              >
                Style
              </label>
              <select
                required
                value={style}
                onChange={(e) => setStyle(e.target.value)}
                name="style"
                id="style"
                className="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 outline-none focus:border-blue-500 focus:outline-none focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
              >
                {buildStyles.map((style, index) => (
                  <option key={index} value={style}>
                    {style}
                  </option>
                ))}
              </select>
            </fieldset>
          </div>
          <div className="grid w-3/4 grid-cols-2 gap-6">
            <fieldset>
              <Label htmlFor="author">Author</Label>
              <Input
                id="author"
                value={author}
                onChange={(e) => setAuthor(e.target.value)}
              />
            </fieldset>
            <fieldset>
              <Label htmlFor="title">Title</Label>
              <Input
                id="title"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
              />
            </fieldset>
          </div>
          <fieldset className="w-3/4">
            <Label htmlFor="description">Description</Label>
            <textarea
              id="description"
              className="block h-40 w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 outline-none focus:border-blue-500 focus:outline-none focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
            />
          </fieldset>
          <section className="flex w-3/4 gap-8">
            <fieldset className="w-1/2">
              <label
                htmlFor="build"
                className="mb-2 block text-sm font-medium text-gray-900  dark:text-white"
              >
                Build Order
              </label>

              <div className="relative overflow-x-auto">
                <table className="w-full text-left text-sm text-gray-500 dark:text-gray-400">
                  <thead className="bg-gray-50 text-xs uppercase text-gray-700 dark:bg-gray-700 dark:text-gray-400">
                    <tr>
                      <th scope="col" className="px-6 py-3">
                        Supply
                      </th>
                      <th scope="col" className="px-6 py-3">
                        Unit / Structure
                      </th>
                      <th scope="col" className="px-6 py-3">
                        Note
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {buildSteps?.map((step, index) => (
                      <tr
                        key={index}
                        className="border-b bg-white dark:border-gray-700 dark:bg-gray-800"
                      >
                        <td className="px-6 py-4">{step.supply}</td>
                        <td className="px-6 py-4">{step.unit}</td>
                        <td className="px-6 py-4">
                          <input
                            className="cursor-pointer bg-transparent outline-none hover:bg-white focus:bg-white focus:text-black"
                            value={step.note}
                            onChange={(e) => updateNote(e.target.value, step)}
                          />
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </fieldset>
            <div className="grid w-1/2 grid-cols-2">
              <div className="flex flex-col items-start gap-2">
                <h3 className="mb-2 font-semibold">Units</h3>
                {units[race as races].map((unit: TStep) => (
                  <button
                    key={unit.name}
                    type="button"
                    onClick={() => addToBuildOrder(unit)}
                    className="text-sm"
                  >
                    {unit.name}
                  </button>
                ))}
              </div>

              <div className="flex flex-col items-start gap-2">
                <h3 className="mb-2 font-semibold">Structures</h3>
                {Structures[race as races].map(({ name, supply }: TStep) => (
                  <button
                    key={name}
                    type="button"
                    onClick={() => addToBuildOrder({ name, supply })}
                    className="text-sm"
                  >
                    {name}
                  </button>
                ))}
              </div>
            </div>
          </section>

          <button
            type="submit"
            className="mr-2 mb-2 rounded-lg bg-blue-700 px-5 py-2.5 text-sm font-medium text-white hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
          >
            Submit
          </button>
        </form>
      </main>
    </>
  );
};

export default SubmitBuildPage;
